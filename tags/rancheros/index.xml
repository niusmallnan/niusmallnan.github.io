<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Niusmallnan</title>
    <link>http://niusmallnan.com/tags/rancheros/index.xml</link>
    <description>Recent content on Niusmallnan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Niusmallnan</copyright>
    <atom:link href="http://niusmallnan.com/tags/rancheros/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[后记] runc cve-2019-5736</title>
      <link>http://niusmallnan.com/2019/02/14/runc-cve-2019-5736-afterword</link>
      <pubDate>Thu, 14 Feb 2019 14:06:57 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2019/02/14/runc-cve-2019-5736-afterword</guid>
      <description>&lt;p&gt;有些话不知当讲不当讲
&lt;/p&gt;

&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;

&lt;p&gt;runc是一个根据OCI(Open Container Initiative)标准创建并运行容器的CLI tool，目前docker引擎内部也是基于runc构建的。
2019年2月11日，研究人员通过oss-security邮件列表披露了runc容器逃逸漏洞的详情，根据OpenWall的规定EXP会在7天后也就是2019年2月18日公开。&lt;/p&gt;

&lt;p&gt;经过几天的咨询内容轰炸，相信大家已经对漏洞已经有了初步的了解，甚至在Github上已经有人提交了EXP代码。Rancher在第一时间完成了补丁修复，并向企业用户推送的修复方案。
同时在我们也收到了大量来自社区用户在后台的提问，为了疏解种种谜团，我们特意再发布一篇文章，选择一些比较热点的问题进行回复。&lt;/p&gt;

&lt;h3 id=&#34;热点问题&#34;&gt;热点问题&lt;/h3&gt;

&lt;h4 id=&#34;非特权容器也能发起攻击吗&#34;&gt;非特权容器也能发起攻击吗？&lt;/h4&gt;

&lt;p&gt;答案是肯定的，Rancher安全团队做了一些测试，即使运行容器时不使用privileged参数，一样可以发起攻击。因为这个漏洞核心要素在于，容器内的用户是否对runc有访问权限，
容器内默认是root用户，只是这个root是受限制的root，但是它是具有对runc的访问权限，所以一定可以发起攻击。&lt;/p&gt;

&lt;h4 id=&#34;主机上不用root用户启动容器可以避免攻击吗&#34;&gt;主机上不用root用户启动容器可以避免攻击吗？&lt;/h4&gt;

&lt;p&gt;答案是无法避免，如上一个问题分析，它和容器内的用户有关，至于在主机上以什么用户启动无关。Rancher安全团队在Ubuntu系统上做了测试，即使使用ubuntu用户启动容器，
依然可以完成对runc的替换。&lt;/p&gt;

&lt;h4 id=&#34;更新官方docker的注意事项&#34;&gt;更新官方Docker的注意事项&lt;/h4&gt;

&lt;p&gt;Docker也在第一时间发布了两个版本18.06.2和18.09.2，这两个版本都可以修复runc漏洞，但是你需要注意的是他们都只兼容4.x内核，如果你的系统依然使用的3.x内核，
请谨慎使用，因为它基本不会起作用，甚至可能导致额外的问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ubuntu 14.04 customers using a 3.13 kernel will need to upgrade to a supported Ubuntu 4.x kernel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考两个版本的RN：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/release-notes/#18062&#34;&gt;https://docs.docker.com/engine/release-notes/#18062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/release-notes/#18092&#34;&gt;https://docs.docker.com/engine/release-notes/#18092&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;kubernetes用户怎么办&#34;&gt;Kubernetes用户怎么办？&lt;/h4&gt;

&lt;p&gt;使用K8s的用户都很清楚，K8s并不能兼容太高的Docker版本，所以更新官方Docker版本是很难的一件事，为此K8s官方特意发表了一篇Blog：&lt;a href=&#34;https://kubernetes.io/blog/2019/02/11/runc-and-cve-2019-5736/&#34;&gt;https://kubernetes.io/blog/2019/02/11/runc-and-cve-2019-5736/&lt;/a&gt; 。
主要思想就是，不要在容器中使用root，它推荐的方案是使用PodSecurityPolicy。当然很多用户修改PodSecurityPolicy后可能会引发各种问题，所以它也推荐用户更新Docker。
同时它也提到，不能更新Docker的用户，可以使用Rancher提供的方案，Rancher为每个版本都移植了补丁：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If you are unable to upgrade Docker, the Rancher team has provided backports of the fix for many older versions at github.com/rancher/runc-cve.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如何使用rancher提供的补丁&#34;&gt;如何使用Rancher提供的补丁？&lt;/h4&gt;

&lt;p&gt;如上一个问题提到的，用户可以直接访问 &lt;a href=&#34;https://github.com/rancher/runc-cve&#34;&gt;https://github.com/rancher/runc-cve&lt;/a&gt; 来获取方案，值得一提的是Rancher为3.x和4.x内核用户都提供了补丁版本。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;To install, find the runc for you docker version, for example Docker 17.06.2 for amd64 will be runc-v17.06.2-amd64. 
For Linux 3.x kernels use the binaries that end with no-memfd_create. Then replace the docker-runc on your host with the patched one.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如何正确使用exp&#34;&gt;如何正确使用EXP？&lt;/h4&gt;

&lt;p&gt;首先不建议大家广泛传播EXP，因为它每暴露一次，就为整体环境增加了一丝风险，我们可以研究学习但是不要恶意传播。
我们在后台看到有些人问到，他们使用了某些EXP代码，攻击没有成功，想知道是不是自己的系统是安全的，不用考虑升级。
Rancher安全团队也查看了一些外部公开的EXP，有些EXP是不完整的，它可能只能在某些环境上起作用。
比如利用libseccomp的EXP，就无法在静态编译的runc上起作用，我们使用了一些公开的EXP就无法在RancherOS上完成攻击。
虽然不同版本的Docker都使用runc，但是不同的操作系统使用runc的方式不同，有的使用static runc，有的使用dynamic runc。
所以不能以某些公开的EXP的执行结果为标准，来判断自己系统是否存在漏洞。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Runc CVE-2019-5736以及RancherOS v1.5.1发布</title>
      <link>http://niusmallnan.com/2019/02/12/rancheros-v151-release</link>
      <pubDate>Tue, 12 Feb 2019 14:24:44 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2019/02/12/rancheros-v151-release</guid>
      <description>&lt;p&gt;一言不合就发新版本
&lt;/p&gt;

&lt;p&gt;runc是一个根据OCI(Open Container Initiative)标准创建并运行容器的CLI tool，目前docker引擎内部也是基于runc构建的。
2019年2月11日，研究人员通过oss-security邮件列表披露了runc容器逃逸漏洞的详情，根据OpenWall的规定EXP会在7天后也就是2019年2月18日公开。&lt;/p&gt;

&lt;p&gt;此漏洞允许以root身份运行的容器以特权用户身份在主机上执行任意代码。实际上，这意味着容器可能会破坏Docker主机(覆盖runc CLI)。
所需要的只是容器中允许使用root。攻击者可以使用受感染的Docker镜像或对未受感染的正在运行的容器运行exec命令。针对此问题的已知缓解措施包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用只读主机文件系统运行&lt;/li&gt;
&lt;li&gt;运行用户命名空间&lt;/li&gt;
&lt;li&gt;不在容器中运行root&lt;/li&gt;
&lt;li&gt;正确配置的AppArmor / SELinux策略（当前的默认策略不够）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;收到披露邮件后，RancherOS团队尝试编写了攻击脚本，在一个普通容器中运行一个非常简单的脚本就完成了对主机的攻击，将主机上的runc替换成了其他程序。&lt;/p&gt;

&lt;p&gt;Docker在第一时间发布了&lt;a href=&#34;https://github.com/docker/docker-ce/releases/tag/v18.09.2&#34;&gt;18.09.2&lt;/a&gt;，用户可升级到此版本以修复该漏洞。
但是通常由于各种因素，用户的生产环境并不容易升级太新的Docker版本，Rancher Labs已经将修复程序反向移植到所有版本的Docker。
相关修补程序以及安装说明，请参考&lt;a href=&#34;https://github.com/rancher/runc-cve&#34;&gt;rancher/run-cve&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;RancherOS作为一款容器化操作系统，其中很多组件依赖runc，我们也在第一时间更新了补丁并发布了v1.5.1和v1.4.3两个版本。&lt;/p&gt;

&lt;h3 id=&#34;rancheros的更新&#34;&gt;RancherOS的更新&lt;/h3&gt;

&lt;p&gt;RancherOS的核心部件system-docker和user-docker都依赖runc，所以v1.5.1和v1.4.3都对他们进行了更新。而针对user-docker，RancherOS可以切换各种版本的docker engine，
所以我们对一下docker engine都进行了反向移植：&lt;strong&gt;v1.12.6/v1.13.1/v17.03.2/v17.06.2/v17.09.1/v17.12.1/v18.03.1/v18.06.1&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;默认安装v1.5.1和v1.4.3，补丁程序已经是内置的，你无需任何操作就可以避免该漏洞。如果你希望使用早起的docker版本，那么切换user-docker时，请使用上面提到的补丁修复版本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ip-172-31-2-241:~# ros engine list
disabled docker-1.12.6
disabled docker-1.13.1
disabled docker-17.03.1-ce
disabled docker-17.03.2-ce
disabled docker-17.06.1-ce
disabled docker-17.06.2-ce
disabled docker-17.09.0-ce
disabled docker-17.09.1-ce
disabled docker-17.12.0-ce
disabled docker-17.12.1-ce
disabled docker-18.03.0-ce
disabled docker-18.03.1-ce
disabled docker-18.06.0-ce
enabled  docker-18.06.1-ce
disabled docker-18.09.0
disabled docker-18.09.1
disabled docker-18.09.2

root@ip-172-31-2-241:~# ros engine switch docker-17.03.2-ce
...

root@ip-172-31-2-241:~# docker info | grep Server
Server Version: 17.03.2-ce
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时v1.5.1版本也是支持docker 18.09.2，你可以切换到该版本，如果你考虑使用Docker官方的修复版本。只需简单运行: &lt;code&gt;ros engine switch docker-18.09.2&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;v1-5-1-和-v1-4-3&#34;&gt;v1.5.1 和 v1.4.3&lt;/h3&gt;

&lt;p&gt;推荐您使用最新的v1.5.1版本，除了修复CVE-2019-5736漏洞外还支持其他新特性以及一些Bug Fix。当然，仍然有很多用户在使用1.4.x版本，所以我们也发布了v1.4.3，
它只修复了runc漏洞，没有其他额外的更新。&lt;/p&gt;

&lt;p&gt;AWS相关镜像已经上传到各个region中，可以直接搜索查找并使用，包括AWS中国区。其他主要镜像列表参考：&lt;a href=&#34;https://github.com/rancher/os/blob/v1.5.x/README.md#release&#34;&gt;https://github.com/rancher/os/blob/v1.5.x/README.md#release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多新特性和Bug Fix请参考v1.5.1的&lt;a href=&#34;https://github.com/rancher/os/releases/tag/v1.5.1&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档说明：&lt;a href=&#34;https://rancher.com/docs/os/v1.x/en/&#34;&gt;https://rancher.com/docs/os/v1.x/en/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后，RancherOS还是一个小众的开源项目，我们专注Docker在Linux上的精简体验，如果喜欢RancherOS，请下载使用，非常期待收到您的反馈。
同时Github上的star，也是鼓励我们继续前行的精神动力。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RancherOS v1.5.0发布</title>
      <link>http://niusmallnan.com/2019/01/06/rancheros-v150-release</link>
      <pubDate>Sun, 06 Jan 2019 17:00:46 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2019/01/06/rancheros-v150-release</guid>
      <description>&lt;p&gt;一言不合就发新版本
&lt;/p&gt;

&lt;p&gt;年关将至，寒意习习，落叶萧萧下，阳光日日稀。RancherOS团队历时两个来月的开发，正式发布RancherOS v1.5.0版本。
在此期间同为Container Linux阵营的CoreOS已经从红帽再入IBM，潮流之变，业界态势，让我们无不更加努力去争得一席之地。
无论是商业用户的积累，还是业界变化带来的社区用户增长，都在催促我们不断革新，应该说1.5.0版本是用户的需求推着我们走出来的。&lt;/p&gt;

&lt;h3 id=&#34;重大特性更新&#34;&gt;重大特性更新&lt;/h3&gt;

&lt;p&gt;本版本的新特征众多，无法一次性全部说明，以下只表述一些用户关注度比较高的特性。个别特性详细说明，我们会不断推出文章一一展开。&lt;/p&gt;

&lt;h4 id=&#34;启动性能提升&#34;&gt;启动性能提升&lt;/h4&gt;

&lt;p&gt;一直以来RancherOS的initrd一直采用xz格式压缩，随着RancherOS的体积不断增大，xz压缩越来越影响系统启动速度。虽然xz格式能够带来比较小的initrd和ISO，
但是我们也需要兼顾启动速度。v1.5.0版本的initrd已经采用了gzip格式，文件体积有所增大，但是启动速度有了质的飞跃。
同时我们也优化了system-docker的镜像加载和cloud-init的启动，对启动速度进行了深度优化。&lt;/p&gt;

&lt;h4 id=&#34;luks磁盘加密支持&#34;&gt;LUKS磁盘加密支持&lt;/h4&gt;

&lt;p&gt;支持LUKS，允许用户对跟磁盘分区进行加密，在一些特殊场景下增强了RancherOS的安全性。运行效果参考下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4208881/47795869-ee87a780-dd2b-11e8-91be-4ac8f685d8fa.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;wifi和4g支持&#34;&gt;WiFi和4G支持&lt;/h4&gt;

&lt;p&gt;Intel正在micro PC领域不断发力，RancherOS被纳入其生态体系，我们支持了WiFi和4G网络，用户可以通过简单的cloud-config配置就可以开启，
带来了十分简洁的用户体验，这部分我们会在后续其他文章中详细介绍。&lt;/p&gt;

&lt;h4 id=&#34;hyper-v支持&#34;&gt;Hyper-V支持&lt;/h4&gt;

&lt;p&gt;很多社区用户一直希望能在Hyper-V使用RancherOS，先前我们一直提供给用户一些custom build的方式来实现它，现在我们正式支持了它，并会持续维护。
无论是docker-machine方式还是boot from ISO方式均可以支持。&lt;/p&gt;

&lt;p&gt;下一个版本我们也会带来RancherOS的Azure Cloud支持。&lt;/p&gt;

&lt;h4 id=&#34;多docker-engine支持&#34;&gt;多docker engine支持&lt;/h4&gt;

&lt;p&gt;这是一个很有趣的特性，目前RancherOS中默认拥有一个user docker。在v1.5.0中，用户可以用过ROS CLI来创建多个user docker engine，
并且每个docker拥有独立的ROOTFS和网络栈，并且可以在console很容易的切换使用任意一个docker。&lt;/p&gt;

&lt;p&gt;当然我们并不推荐您在生产中使用，我们的某个商业客户把这个特性应用在其CI环境中，极大的提升了资源的利用率，减少了物理机器数量的开销。&lt;/p&gt;

&lt;h4 id=&#34;改善vmware的支持&#34;&gt;改善VMware的支持&lt;/h4&gt;

&lt;p&gt;RancherOS的广大用户中Vmware是占有很大的用户群，之前我们的版本中只针对docker-machine方式做了一些改善，但是很多用户还希望使用boot from ISO方式和VMDK方式，
我们相关的镜像也做了支持，用户可以饿直接下载使用它：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[VMDK] &lt;a href=&#34;https://releases.rancher.com/os/v1.5.0/vmware/rancheros.vmdk&#34;&gt;https://releases.rancher.com/os/v1.5.0/vmware/rancheros.vmdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Docker Machine] &lt;a href=&#34;https://releases.rancher.com/os/v1.5.0/rancheros-vmware.iso&#34;&gt;https://releases.rancher.com/os/v1.5.0/rancheros-vmware.iso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Boot From ISO] &lt;a href=&#34;https://releases.rancher.com/os/v1.5.0/vmware/rancheros.iso&#34;&gt;https://releases.rancher.com/os/v1.5.0/vmware/rancheros.iso&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;arm的支持&#34;&gt;ARM的支持&lt;/h4&gt;

&lt;p&gt;由于Rancher和ARM已经开始了战略合作，我们会在一起做很多有趣的事。RancherOS的ARM支持也是其中的一部分，原先我们只是对RPi做了支持，
现在我们提供ARM版本的initrd和vmlinuz，用户可以用它们使用iPXE方式启动：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://releases.rancher.com/os/v1.5.0/arm64/initrd&#34;&gt;https://releases.rancher.com/os/v1.5.0/arm64/initrd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://releases.rancher.com/os/v1.5.0/arm64/vmlinuz&#34;&gt;https://releases.rancher.com/os/v1.5.0/arm64/vmlinuz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们依然只会对ARM64支持，且v1.5.0的ARM支持只是实验性质的，并不推荐应用在生产中。
我们会和ARM进行合作进行更广泛的测试，后续的版本将会是更稳定的。&lt;/p&gt;

&lt;h3 id=&#34;更加友好的自定义&#34;&gt;更加友好的自定义&lt;/h3&gt;

&lt;p&gt;社区中越来越多的发烧友并不局限使用我们的正式发布版本，他们会根据自己的需求修改RancherOS，构建自己的RancherOS。
我们提供了一些友好的编译选项，用户可以自定义自己的RancherOS。&lt;/p&gt;

&lt;h4 id=&#34;更改默认docker-engine&#34;&gt;更改默认docker engine&lt;/h4&gt;

&lt;p&gt;RancherOS的每个版本都会有自己设定的默认docker engine，而在用户的场景下，可能需要一个内部认可的docker engine，且希望它是RancherOS默认的版本。
那么用户可以在构建时候指定docker engine版本，来构建自己的RancherOS，以docker 17.03.2为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;USER_DOCKER_VERSION=17.03.2 make release
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;更改默认console&#34;&gt;更改默认console&lt;/h4&gt;

&lt;p&gt;RancherOS支持很多console，比如ubuntu、alpine、centos等，由于我们的default console基于busybox，有些用户并不喜欢它，且不希望每次都去切换console。
那么用户可以使用这种方式构建一个默认console是自己喜欢的版本，以alpine console为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ OS_CONSOLE=alpine make release
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;

&lt;p&gt;AWS相关镜像已经上传到各个region中，可以直接搜索查找并使用，包括AWS中国区。其他主要镜像列表参考：&lt;a href=&#34;https://github.com/rancher/os/blob/v1.5.x/README.md#release&#34;&gt;https://github.com/rancher/os/blob/v1.5.x/README.md#release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多新特性和Bug Fix请参考v1.5.0的&lt;a href=&#34;https://github.com/rancher/os/releases/tag/v1.5.0&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档说明：&lt;a href=&#34;https://rancher.com/docs/os/v1.x/en/&#34;&gt;https://rancher.com/docs/os/v1.x/en/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后，RancherOS还是一个小众的开源项目，我们专注Docker在Linux上的精简体验，如果喜欢RancherOS，请在Github上给我们一个star，鼓励我们继续前行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RancherOS v1.2.0发布</title>
      <link>http://niusmallnan.com/2018/02/07/rancheros-v120-release</link>
      <pubDate>Wed, 07 Feb 2018 16:52:31 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2018/02/07/rancheros-v120-release</guid>
      <description>&lt;p&gt;一言不合就发新版本
&lt;/p&gt;

&lt;p&gt;RancherOS v1.2.0版本于北京时间2月7日正式发布，从v1.1到v1.2开发周期中，我们收集到了社区用户和商业用户的Bug report和Feature request，
感谢大家为此作出的贡献。这个周期内，Meltdown和Spectre漏洞曝出给OS界造成了沉重的打击，我
们也时刻紧跟业界动向，第一时间把漏洞补丁更新到RancherOS中。&lt;/p&gt;

&lt;h3 id=&#34;spectre-var-2-漏洞修复&#34;&gt;Spectre Var.2 漏洞修复&lt;/h3&gt;

&lt;p&gt;对于Spectre变种2，我们采用了新的GCC编译器开启Retpoline指令重新编译了内核。而Intel的微码补丁，我们并没有采用，因为业界对这个补丁诟病很深，
已经造成了很多云厂商的Crash问题。&lt;/p&gt;

&lt;p&gt;基于最新的RancherOS v1.2.0可以使用这种方式检测Meltdown和Spectre的修复状态：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo system-docker run --rm -it -v /:/host niusmallnan/spectre-meltdown-checker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tKfTcgy1fo80fauf1fj319s0v8gqy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;不再支持arm32&#34;&gt;不再支持ARM32&lt;/h3&gt;

&lt;p&gt;考虑到32位操作系统发展情况，以及其他Linux发行版的支持情况，不再对ARM 32位进行硬件支持。
ARM 64位依然会继续支持，你依然可以继续在合适的树莓派型号上使用它。&lt;/p&gt;

&lt;p&gt;树莓派镜像：&lt;a href=&#34;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-raspberry-pi64.zip&#34;&gt;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-raspberry-pi64.zip&lt;/a&gt;
安装方式参考：&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;https://www.raspberrypi.org/documentation/installation/installing-images/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;各个console更新&#34;&gt;各个Console更新&lt;/h3&gt;

&lt;p&gt;RancherOS支持多种console，比如Ubuntu、Debian、Alpine等等，默认使用busybox console。
Busybox console基于&lt;a href=&#34;https://github.com/buildroot/buildroot&#34;&gt;Buildroot&lt;/a&gt;，本次发布更新了较新的稳定版本。&lt;/p&gt;

&lt;p&gt;其他console均更新成LTS版本，版本如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alpine: 3.7&lt;/li&gt;
&lt;li&gt;CentOS: 7.4.1708&lt;/li&gt;
&lt;li&gt;Debian: stretch&lt;/li&gt;
&lt;li&gt;Fedora: 27&lt;/li&gt;
&lt;li&gt;Ubuntu: xenial&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;

&lt;p&gt;AWS相关镜像已经上传到各个region中，可以直接搜索查找并使用，AWS中国区目前还不支持。其他主要镜像列表：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;阿里云镜像：&lt;a href=&#34;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-aliyun.vhd&#34;&gt;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-aliyun.vhd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCE镜像：&lt;a href=&#34;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-gce.tar.gz&#34;&gt;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-gce.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenStack镜像：&lt;a href=&#34;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-openstack.img&#34;&gt;https://github.com/rancher/os/releases/download/v1.2.0/rancheros-openstack.img&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多新特性和Bug Fix请参考v1.2.0的&lt;a href=&#34;https://github.com/rancher/os/releases/tag/v1.2.0&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档说明：&lt;a href=&#34;http://rancher.com/docs/os/v1.2/en/&#34;&gt;http://rancher.com/docs/os/v1.2/en/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在RancherOS上更新microcode</title>
      <link>http://niusmallnan.com/2018/01/22/update-microcode-on-rancheros</link>
      <pubDate>Mon, 22 Jan 2018 17:16:17 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2018/01/22/update-microcode-on-rancheros</guid>
      <description>&lt;p&gt;RancherOS上更新microcode
&lt;/p&gt;

&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;

&lt;p&gt;进来公布Google的Project Zero团队公布的Spectre和Meltdown漏洞，真可谓一石激起千层浪，
业内各个硬件软件厂商开源社区都在积极参与漏洞修复。Meltdown是最早被修复的，在Kernel中开启KPTI就可以缓解该问题，
Spectre则依然在火热进行中。而作为漏洞的始作俑者Intel，Spectre漏洞的Intel官方缓解方案也于近日放出。
当然目前很多更新并非真正的修复，而是在最大程度抵御和缓解相关攻击。&lt;/p&gt;

&lt;h3 id=&#34;更新microcode&#34;&gt;更新microcode&lt;/h3&gt;

&lt;p&gt;通过更新microcode和系统补丁可以缓解Spectre Var. 2漏洞，也就是CVE-2017-5715 branch target injection。
除了在BIOS中可以更新microcode之外，Kernel也提供了更新microcode的机制。本文只关注在如何在RancherOS上更新microcode。&lt;/p&gt;

&lt;p&gt;下载最新的Intel microcode版本，注意microcode一般并不是适用所有的CPU，比如&lt;a href=&#34;https://downloadcenter.intel.com/download/27431/Linux-Processor-Microcode-Data-File&#34;&gt;20180108&lt;/a&gt;这个版本，主要是以下CPU才会起作用：&lt;br /&gt;
&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tNc79ly1fnpsvdzc3rj30wu1byn1l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下载并解压缩之后，你会发现一个是intel-ucode目录下一些文件，另外一个单独的microcode.dat文件。
前者是支持热加载方式，也是现在比较推荐的方式；后者是传统更新方式，需要在initrd中加入microcode加载。
对于RancherOS，前者比较合适，使用起来相对简单。&lt;/p&gt;

&lt;p&gt;若要在内核支持更新microcode，需要在编译内核时加入以下配置（RancherOS已经开启）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_MICROCODE=y
CONFIG_MICROCODE_INTEL=y
CONFIG_MICROCODE_AMD=y
CONFIG_MICROCODE_OLD_INTERFACE=y #支持传统方式，开启此项
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程比较简单，几乎每个版本的microcode都有相应的releasnote，大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Make sure /sys/devices/system/cpu/microcode/reload exits:
$ ls -l /sys/devices/system/cpu/microcode/reload

# You must copy all files from intel-ucode to /lib/firmware/intel-ucode/ using the cp command
$ sudo cp -v intel-ucode/* /lib/firmware/intel-ucode/

# You just copied intel-ucode directory to /lib/firmware/. Write the reload interface to 1 to reload the microcode files:
$ echo 1 &amp;gt; /sys/devices/system/cpu/microcode/reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无论更新成功与否，在dmesg中都会查看到相关信息，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dmesg | grep microcode
[   13.659429] microcode: sig=0x306f2, pf=0x1, revision=0x36
[   13.665981] microcode: Microcode Update Driver: v2.01 &amp;lt;tigran@aivazian.fsnet.co.uk&amp;gt;, Peter Oruba
[  510.899733] microcode: updated to revision 0x3b, date = 2017-11-17  # 这条msg很重要
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看cpuinfo，再次确认microcode版本，不同的CPU型号，升级后对应的microcode版本是不同的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /proc/cpuinfo |grep &amp;quot;model\|microcode\|stepping\|family&amp;quot; |head -n 5
cpu family   : 6
model        : 63
model name   : Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz
stepping     : 2
microcode    : 0x3b #之前是0x36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在cloud-config中在runcmd添加脚本，保证每次启动都加载最新版本的microcode：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;runcmd:
- echo 1 &amp;gt; /sys/devices/system/cpu/microcode/reload
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;关于Spectre Var. 2，我们依然在持续关注，
直接在内核编译中使用Retpoline指令替换技术，可以更简单方便的缓解branch target injection，
现在内核已经支持了Retpoline指令替换的设置，但是也需要最新版本的GCC编译器的特性支持，
而带有GCC的新补丁的正式版本还没有发布，一旦GCC新版本发布，我们会马上更新内核并发布新的RancherOS版本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RancherOS上运行RKE</title>
      <link>http://niusmallnan.com/2018/01/21/rke-on-rancheros</link>
      <pubDate>Sun, 21 Jan 2018 16:23:54 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2018/01/21/rke-on-rancheros</guid>
      <description>&lt;p&gt;RancherOS上运行RKE的注意事项
&lt;/p&gt;

&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;

&lt;p&gt;RancherOS是一个非常精简的操作系统，功能上肯定不如Ubuntu/CentOS之流全面，所以在其上面使用RKE部署Kubernetes时候需要注意一些问题。&lt;/p&gt;

&lt;h4 id=&#34;切换到合适的docker-engine上&#34;&gt;切换到合适的docker engine上&lt;/h4&gt;

&lt;p&gt;一般来说K8s并不会适配所有docker engine，但是RancherOS提供docker engine自由切换的功能，可以先列出RancherOS的支持的docker engine版本:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@ip-172-31-5-104 rancher]# ros engine list
disabled docker-1.12.6
disabled docker-1.13.1
disabled docker-17.03.1-ce
current  docker-17.03.2-ce
disabled docker-17.04.0-ce
disabled docker-17.05.0-ce
disabled docker-17.06.1-ce
disabled docker-17.06.2-ce
disabled docker-17.09.1-ce
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据RKE的文档，选择合适的docker engine，切换docker engine很简单，使用&lt;code&gt;ros engine switch xxx&lt;/code&gt;即可。&lt;/p&gt;

&lt;h4 id=&#34;持久化相关目录&#34;&gt;持久化相关目录&lt;/h4&gt;

&lt;p&gt;RancherOS的默认console中只有部分目录是持久化的，这意味着你重启主机后，非持久化目录的数据会自动清理。
K8s会有一些数据需要持久化的磁盘上，所以针对K8s这些持久化目录，我们需要提前给RancherOS配置额外的持久化目录。&lt;/p&gt;

&lt;p&gt;RancherOS中目录的定义，请参考：&lt;a href=&#34;http://rancher.com/docs/os/v1.1/en/system-services/system-docker-volumes/&#34;&gt;http://rancher.com/docs/os/v1.1/en/system-services/system-docker-volumes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RancherOS默认包括三个持久化目录(user-volumes)，&lt;code&gt;/home/&lt;/code&gt; &lt;code&gt;/opt/&lt;/code&gt; &lt;code&gt;/var/lib/kubelet&lt;/code&gt;，如果要添加其他目录，可以使用下面的方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 增加了 /etc/kubernetes 和 /etc/cni
ros config set rancher.services.user-volumes.volumes  [/home:/home,/opt:/opt,/var/lib/kubelet:/var/lib/kubelet,/etc/kubernetes:/etc/kubernetes,/etc/cni:/etc/cni]

system-docker rm all-volumes

reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体那些目录需要持久化，还要看自己的部署需求，相关目录请参考：&lt;a href=&#34;https://github.com/rancher/rke#cluster-remove&#34;&gt;https://github.com/rancher/rke#cluster-remove&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在阿里云上运行RancherOS</title>
      <link>http://niusmallnan.com/2017/12/05/rancheros-on-aliyun</link>
      <pubDate>Tue, 05 Dec 2017 16:32:52 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2017/12/05/rancheros-on-aliyun</guid>
      <description>&lt;p&gt;阿里云上也可以玩转RancherOS
&lt;/p&gt;

&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;

&lt;p&gt;RancherLabs创立之初就立志于做一家纯粹的云产品公司，秉承一切开源的理念，为用户带来方便快捷的体验。我们推出的Rancher深受全球用户的喜爱，
为了构建完整的用户体验丰富我们的产品线，我们考虑把传统的操作系统也引入容器的体验，于是我们大概在2015年正式推出了&lt;a href=&#34;https://github.com/rancher/os&#34;&gt;RancherOS&lt;/a&gt;这个项目，
该项目一经推出凭借其极具创新性的理念，荣登2015年Github10大开源项目，我们致力于打造轻量可靠，一切皆容器的操作系统。今年早些时候Docker发布的Linuxkit其实也从侧面印证了，
我们选择的这条路是顺应发展趋势的，只不过RancherOS先行了一步。&lt;/p&gt;

&lt;p&gt;现在我们在各个公有云平台上给用户免费使用，国外的厂商DigitalOcean甚至把RancherOS放到了Container distributions的UI选项中，越来越多的用户开始使用RancherOS，
参与到RancherOS的社区建设中，给我们反馈问题，协助我们不断改善产品。
而非常遗憾的是，中国用户始终无法在公有云中方便地使用它，其中原因诸多，国内的公有云也是这一两年才真正发展起来，
最初我们尝试在国内引入RancherOS时，很多平台无法提供有效的途径。&lt;/p&gt;

&lt;p&gt;现在，一切已经开始走向成熟，这次可以很开心得向大家宣布，RancherOS登陆阿里云，欢迎大家使用。
作为开源软件，不断积累改进是我们的目标，文章最后给大家提供了各种反馈使用问题的渠道。&lt;/p&gt;

&lt;h3 id=&#34;如何使用&#34;&gt;如何使用&lt;/h3&gt;

&lt;p&gt;首先声明一下，作为支持阿里云的首个版本仍然有很多不成熟之处，还有一些使用限制，如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;需使用阿里云VPC网络&lt;/li&gt;
&lt;li&gt;创建VM时，只支持密钥，不支持设置密码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先下载RancherOS专属阿里云镜像，比如：&lt;a href=&#34;https://releases.rancher.com/os/latest/rancheros-aliyun.vhd&#34;&gt;https://releases.rancher.com/os/latest/rancheros-aliyun.vhd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;将镜像上传到阿里云对象存储中，因为自定义镜像是需要从对象存储中获取。&lt;/p&gt;

&lt;p&gt;创建自定义镜像，按如下方式填写：&lt;br /&gt;
&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tKfTcly1fmm2l7gfbhj312a0rewfl.jpg&#34; alt=&#34;&#34; /&gt;
注意事项包括：系统盘大小大于10GB，系统架构为x86_64，系统平台为Others Linux，镜像格式为VHD。&lt;/p&gt;

&lt;p&gt;创建VM时，按以下方式选择镜像：&lt;br /&gt;
&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tKfTcly1fmwjd489e6j30wi09odg1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;创建成功后，使用ssh，访问用户是rancher，当然不要忘记指定密钥：&lt;br /&gt;
&lt;img src=&#34;https://ws2.sinaimg.cn/large/006tKfTcly1fm77ckj7ywj31ek0aq3z5.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tKfTcly1fm76t2hvs7j316u12641q.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于现在ROS镜像还没有发布到阿里云镜像市场中，当你创建完自定义镜像后，你可以按照如下方式共享给你的伙伴使用：&lt;br /&gt;
&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tKfTcly1fm76xwulxxj30vy0jw74v.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;反馈渠道&#34;&gt;反馈渠道&lt;/h3&gt;

&lt;p&gt;各种问题欢迎随时提交issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这里建议使用英文 &lt;a href=&#34;https://github.com/rancher/os/issues&#34;&gt;https://github.com/rancher/os/issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中文issue可以提交到Maintainer的个人Repo上: &lt;a href=&#34;https://github.com/niusmallnan/os/issues&#34;&gt;https://github.com/niusmallnan/os/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时也欢迎大家发送邮件(niusmallnan@gmail.com)给开发者。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树莓派上的Docker集群管理</title>
      <link>http://niusmallnan.com/2016/11/07/docker-on-rpi</link>
      <pubDate>Mon, 07 Nov 2016 17:36:37 +0800</pubDate>
      
      <guid>http://niusmallnan.com/2016/11/07/docker-on-rpi</guid>
      <description>&lt;p&gt;随着IOT市场的火热发展，Docker天然的轻量级以及帮助业务快速重构的特性，
将会在IOT领域迎来巨大发展潜力，甚至有可能会比它在云端的潜力更大。
本文将致力于构建一个利用RancherOS来管理运行在树莓派上的容器集群。
&lt;/p&gt;

&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;

&lt;p&gt;目前业界主流基本都是在x86架构上使用Docker，除了因为Intel在服务器领域的绝对领导地位之外，
x86 CPU的确在性能上有着卓越的表现。但是近些年来，随着云计算的迅猛发展，
引来了数据中心的大规模建设，慢慢地大家对数据中心PUE尤其是CPU功耗有了更高的要求。
ARM CPU虽然性能不如x86，但是在功耗上绝对有着无法比拟的优势，
同时我们知道并不是所有的服务都有高性能的CPU需要。很多厂商在都对ARM服务器投入了研发资源，
但是效果上目前来看并不是太好，ARM处理器在服务器领域并没有如在移动端那样被快速接受，
主要是因为市场接受度及服务器市场的性能要求所致。&lt;br /&gt;
&lt;img src=&#34;http://ww4.sinaimg.cn/large/7853084cjw1fa26h172hoj20ib09dgmz.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是在物联网（IOT）领域，ARM处理器却是霸主级的地位，毕竟在这个领域功耗胜过一切。
那么我们可以想象，未来会占大市场的IOT设备中，会出现各种尺寸各种架构，
内置操作系统也不统一，没有通用程序打包标准，几乎每种设备程序的开发框架均不同，
IOT设备中程序部署升级回滚等操作不够灵活，等等这样那样的问题。&lt;/p&gt;

&lt;h3 id=&#34;分析与实践&#34;&gt;分析与实践&lt;/h3&gt;

&lt;p&gt;这些问题，我们可以借鉴X86时代的经验，用Docker容器来解决它们。
Docker能降低IOT应用管理的负载度，但是在物理设备和Docker之间，
我们还需要一个轻量级的操作系统。这个OS需要是完全可以定制的，
可以针对不同设备需求，裁剪或增加对应的程序模块，更小体积更少进程意味着更低的功耗。&lt;/p&gt;

&lt;p&gt;根据以上判断和需求，我经过了一番探索，最终选择了RancherOS。它本身的特性是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;真正容器化的Linux操作系统极致精简，所有服务（包括系统服务）均运行在容器中，
可以以容器方式对其进行任意定制&lt;/li&gt;
&lt;li&gt;内置了Docker Engine，无需在安装系统后再进行Docker安装&lt;/li&gt;
&lt;li&gt;完全开源&lt;a href=&#34;https://github.com/rancher/os&#34;&gt;https://github.com/rancher/os&lt;/a&gt;，我们可以进行各种深度定制&lt;/li&gt;
&lt;li&gt;最最重要的，支持ARM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在RancherOS的整体架构中，最底层毋庸置疑是Linux kernel，系统启动后的PID 1用system-docker代替，
由它来把udev、dhcp、console等系统服务启动，同时会启动user-docker，
用户运行的应用程序均跑在user-docker下。&lt;br /&gt;
&lt;img src=&#34;http://ww2.sinaimg.cn/large/7853084cjw1fa26kta7rkj20l109s3zt.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们以树莓派为例，将RancherOS部署在其之上。这里需要提示的是，RancherOS每个版本release之时，
都会放出树莓派的支持版本，
比如本次分享使用的&lt;a href=&#34;https://github.com/rancher/os/releases/
download/v0.7.0/rancheros-raspberry-pi.zip&#34;&gt;v0.7.0版本&lt;/a&gt;。通过dd命令将RancherOS写到树莓派的SD卡上，
通电点亮树莓派。&lt;br /&gt;
&lt;img src=&#34;http://ww4.sinaimg.cn/large/7853084cjw1fa26m5gaz0j20aq0aawg4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看PID 1是system-docker：&lt;br /&gt;
&lt;img src=&#34;http://ww1.sinaimg.cn/large/7853084cjw1fa26mgfy51j20fn03ldh0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过system-docker ps 查看启动的系统服务：&lt;br /&gt;
&lt;img src=&#34;http://ww2.sinaimg.cn/large/7853084cjw1fa26mp3zphj20s603u0uw.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;正常来说，我们都得设置一下docker registry mirror，这样方便pull镜像。
RancherOS的配置，都是通过ros config命令来配置，比如设置user-docker的mirror：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ros config set rancher.docker.extra_args [--registry-mirror,https://xxxxxxx]
$ sudo system-docker restart docker # 重启user-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终，可以看到：&lt;br /&gt;
&lt;img src=&#34;http://ww2.sinaimg.cn/large/7853084cjw1fa26nqlvixj20wf02ydi4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;RancherOS有一个我认为比较好的特性，就是支持很方便的对Docker Engine版本进行切换。
目前Docker迭代的速度并不慢，实际上很多程序不一定会兼容比较新的Engine，
Docker Engine版本的管理变得越来越重要。尤其是在测试环境中，
我们有时确实需要变换Docker Engine版本，来构建测试场景：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ros engine list  #查看当前版本支持的engine有哪些
disabled docker-1.10.3
disabled docker-1.11.2
current  docker-1.12.1
$ sudo ros engine switch docker-1.11.2 #切换docker-1.11版本
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此外，如果对docker engine有更特殊的需求，还可以定制自己的版本，然后让system-docker来加载它。
只需将编译好的docker engine放到scrach镜像中即可：&lt;br /&gt;
&lt;img src=&#34;http://ww3.sinaimg.cn/large/7853084cjw1fa26p7gcphj20fx06fmy1.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这部分可以参考：&lt;a href=&#34;https://github.com/rancher/os-engines&#34;&gt;https://github.com/rancher/os-engines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外，如果习惯了使用相应Linux发行版的命令行，
那么也可以加载对应的console镜像（当然如果考虑精简系统也可不必加载）：&lt;br /&gt;
&lt;img src=&#34;http://ww3.sinaimg.cn/large/7853084cjw1fa26pvzryej20by03pdg5.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
此部分需要进行深度定制，可以参考：&lt;a href=&#34;https://github.com/rancher/os-images&#34;&gt;https://github.com/rancher/os-images&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://ww1.sinaimg.cn/large/7853084cjw1fa26qd06b7j20ej0bm410.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;RancherOS更多酷炫的功能，可以访问官方的文档：&lt;a href=&#34;http://docs.rancher.com/os&#34;&gt;http://docs.rancher.com/os&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RancherOS介绍完毕后，我们可以在单机树莓派上做容器管理了，喜欢命令行的当然最好，
喜欢UI管理的，推荐两款可以在树莓派上运行的管理程序。
&lt;strong&gt;portainer&lt;/strong&gt;&lt;a href=&#34;https://github.com/portainer/portainer&#34;&gt;https://github.com/portainer/portainer&lt;/a&gt;，
其有专门的arm镜像portainer/portainer:arm ，运行后：
&lt;code&gt;$ docker run --restart=always -d -p 9000:9000 --privileged 
    -v /var/run/docker.sock:/var/run/docker.sock 
    portainer/portainer:arm&lt;/code&gt;&lt;br /&gt;
&lt;img src=&#34;http://ww3.sinaimg.cn/large/7853084cjw1fa26s6xjj2j20oz0e2jtp.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;更加简约的 ui-for-docker &lt;a href=&#34;https://github.com/kevana/ui-for-docker&#34;&gt;https://github.com/kevana/ui-for-docker&lt;/a&gt; ，运行如下：
&lt;code&gt;$ docker run --restart=always -d -p 9000:9000 
    -v /var/run/docker.sock:/var/run/docker.sock 
    hypriot/rpi-dockerui&lt;/code&gt;&lt;br /&gt;
&lt;img src=&#34;http://ww3.sinaimg.cn/large/7853084cjw1fa26sxv8ofj20ot0g0abm.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;单机树莓派之后，我们就要考虑如何将多个树莓派组成Docker集群。
一提到Docker集群，我们就会考虑需要编排引擎的支持，
无非就是主流的Mesos、Kubernetes、Swarm，还有非主流的Cattle、Nomad之流。
那么在IOT场景下，我们最需要考虑的就是精简，所以我选择了新版的Swarm。
将RancherOS的Engine切换到1.12.3，然后构建Swarm集群。&lt;/p&gt;

&lt;p&gt;简单得执行swarm init和join后，我们就得到了一个树莓派Docker集群：&lt;br /&gt;
&lt;img src=&#34;http://ww2.sinaimg.cn/large/7853084cjw1fa26tjxxlyj20fi01twey.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后我们可以快速执行一个小demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#swarmkit demo
$ docker service create --replicas 1 -p 80 --name app armhf/httpd
$ docker service scale app=2
$ docker service ps app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/large/7853084cjw1fa26u6875lj20jk01y751.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;更多ARM相关的Docker镜像，可以到这两个地方查找：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/armhf&#34;&gt;https://hub.docker.com/r/armhf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/u/aarch64&#34;&gt;https://hub.docker.com/u/aarch64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RancherOS设计之初是为了构建一个运行Rancher的轻量级操作系统，
那么Rancher本身在ARM的支持上也在不断推进中，
相应的&lt;a href=&#34;https://github.com/rancher/rancher/pull/4704&#34;&gt;PR&lt;/a&gt;也有提交。
不过目前来看，对rancher-server的ARM化还是比较麻烦，对agent的节点支持ARM相对简单一些，
也就是说rancher-server仍然运行在x86架构上，而agent节点可以支持ARM和x86。&lt;/p&gt;

&lt;p&gt;Kubernetes的ARM支持在社区中也有很多人在做，比如：
&lt;a href=&#34;https://github.com/luxas/kubernetes-on-arm&#34;&gt;https://github.com/luxas/kubernetes-on-arm&lt;/a&gt;，来自社区的分享：&lt;br /&gt;
&lt;img src=&#34;http://ww4.sinaimg.cn/large/7853084cjw1fa26w8ifrrj20i00h577r.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;秀一下，我的“家庭树莓派数据中心”：&lt;br /&gt;
&lt;img src=&#34;http://ww3.sinaimg.cn/large/7853084cjw1fa26wjj274j20c50chmzj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，我要特别感谢RancherOS的开发者们，他们帮助我解决了很多问题；
另外还要特别感谢MBH树莓派社区的伙伴，提供了硬件设备，支持我的技术探索，
并提供了很多帮助。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>